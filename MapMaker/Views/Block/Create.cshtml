@model MapMaker.Models._02_BlockModels.CreateBlockViewModel

@{
    ViewBag.Title = "New Block";
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>BlockCreate</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">

        @Html.LabelFor(model => model.CreateBlockModel.Type, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                List<SelectListItem> listItems = new List<SelectListItem>();
                listItems.Add(new SelectListItem
                {
                    Text = "Object",
                    Value = "Object",
                    Selected = true
                });
                listItems.Add(new SelectListItem
                {
                    Text = "NPC",
                    Value = "NPC",
                });
                listItems.Add(new SelectListItem
                {
                    Text = "Wall",
                    Value = "Wall"
                });
            }
            @Html.DropDownListFor(model => model.CreateBlockModel.Type, listItems, "-- Select Status --", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreateBlockModel.Type, "", new { @class = "text-danger" })

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CreateBlockModel.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreateBlockModel.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreateBlockModel.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CreateBlockModel.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreateBlockModel.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreateBlockModel.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CreateBlockModel.PosX, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreateBlockModel.PosX, new { htmlAttributes = new { @class = "form-control", @min = 1, @max = Model.MapModel.SizeX } })
            @Html.ValidationMessageFor(model => model.CreateBlockModel.PosX, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CreateBlockModel.PosY, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreateBlockModel.PosY, new { htmlAttributes = new { @class = "form-control", @min = 1, @max = Model.MapModel.SizeY } })
            @Html.ValidationMessageFor(model => model.CreateBlockModel.PosY, "", new { @class = "text-danger" })
        </div>
    </div>
    
    @Html.HiddenFor(model => model.MapModel.MapID)

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to Map", "Details", "Map", new { id = Model.MapModel.MapID }, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
