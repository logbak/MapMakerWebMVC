@model MapMaker.Models.BlockEventViewModel

@{
    ViewBag.Title = "Add";
}

<br />
<br />
<hr />
<div class="row">
    <div class="col-md-1"></div>
    <div class="col-md-5">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h3>Add Game Event</h3>
                <hr />
                <br />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.CreateEvent.ID)

                @Html.HiddenFor(model => model.DetailOfBlock.ID)

                <div class="form-group">
                    @Html.LabelFor(model => model.CreateEvent.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @{
                            List<SelectListItem> listItems = new List<SelectListItem>();
                            listItems.Add(new SelectListItem
                            {
                                Text = "Dialog",
                                Value = "Dialog",
                                Selected = true
                            });
                            listItems.Add(new SelectListItem
                            {
                                Text = "Minigame",
                                Value = "Minigame",
                            });
                            listItems.Add(new SelectListItem
                            {
                                Text = "Other",
                                Value = "Other"
                            });
                        }
                        @Html.DropDownListFor(model => model.CreateEvent.Type, listItems, "-- Select Status --", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CreateEvent.Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CreateEvent.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CreateEvent.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreateEvent.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CreateEvent.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CreateEvent.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreateEvent.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Add" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
        <br />
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
    <div class="col-md-5">
        <h3>BlockDetail</h3>
        <hr />
        <br />
        <dl class="dl-horizontal" style="font-size:larger;">
            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.ID)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.ID)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.MapID)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.MapID)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.Creator)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.Creator)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.TypeOfBlock)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.TypeOfBlock)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.Name)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.Name)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.Description)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.Description)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.PosX)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.PosX)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.DetailOfBlock.PosY)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.DetailOfBlock.PosY)
            </dd>
        </dl>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
