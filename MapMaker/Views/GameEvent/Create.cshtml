@model MapMaker.Models.BlockEventViewModel

@{
    ViewBag.Title = "Create Event";
}
<hr />
<div class="row">
    <div class="col-md-1"></div>
    <div class="col-md-5">
        <div class="form-horizontal">
            <h3>Game Event Creation</h3>
            <hr />
            <br />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.DetailOfBlock.ID)

            <div class="form-group">
                @Html.LabelFor(model => model.CreateEvent.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @{
                        List<SelectListItem> listItems = new List<SelectListItem>();
                        listItems.Add(new SelectListItem
                        {
                            Text = "Dialog",
                            Value = "Dialog",
                            Selected = true
                        });
                        listItems.Add(new SelectListItem
                        {
                            Text = "Minigame",
                            Value = "Minigame",
                        });
                        listItems.Add(new SelectListItem
                        {
                            Text = "Other",
                            Value = "Other"
                        });
                    }
                    @Html.DropDownListFor(model => model.CreateEvent.Type, listItems, "-- Select Status --", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CreateEvent.Type, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateEvent.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateEvent.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateEvent.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateEvent.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateEvent.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateEvent.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

        <br />
        <div>
            @Html.ActionLink("Back to Event List", "Index") |
            @Html.ActionLink("Back to Block Detail", "Detail", "Block", new { id = Model.DetailOfBlock.ID }, null)
        </div>
    </div>
    <div class="col-md-5">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div>
                <h3>BlockDetail</h3>
                <hr />
                <dl class="dl-horizontal">
                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.ID)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.ID)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.MapID)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.MapID)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.Creator)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.Creator)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.TypeOfBlock)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.TypeOfBlock)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.Name)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.Name)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.Description)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.Description)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.PosX)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.PosX)
                    </dd>

                    <dt>
                        @Html.DisplayNameFor(model => model.DetailOfBlock.PosY)
                    </dt>

                    <dd>
                        @Html.DisplayFor(model => model.DetailOfBlock.PosY)
                    </dd>
                </dl>
            </div>
        }
    </div>
</div>

<hr />
    <div class="row">
        <h3>Free Events</h3>
        <div class="table-responsive">
            <table class="table">
                <tr>
                    <th>
                        Type of Event
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GameEvents.First().Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GameEvents.First().Description)
                    </th>
                </tr>

                @foreach (var item in Model.GameEvents)
                {
                    if (item.BlockID != 0)
                    {
                        continue;
                    }
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.TypeOfEvent)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.ActionLink("Add Event", "Add", new { eventID = item.ID, blockID = Model.DetailOfBlock.ID })
                        </td>
                    </tr>
                }

            </table>
        </div>
    </div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
